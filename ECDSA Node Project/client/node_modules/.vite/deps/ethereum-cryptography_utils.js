import {
  assert_default,
  bytesToHex,
  concatBytes,
  createView,
  hexToBytes,
  utf8ToBytes
} from "./chunk-ESSWP3DB.js";
import "./chunk-FAW2VN4A.js";

// node_modules/ethereum-cryptography/esm/utils.js
var assertBool = assert_default.bool;
var assertBytes = assert_default.bytes;
function bytesToUtf8(data) {
  if (!(data instanceof Uint8Array)) {
    throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
  }
  return new TextDecoder().decode(data);
}
function hexToBytes2(data) {
  const sliced = data.startsWith("0x") ? data.substring(2) : data;
  return hexToBytes(sliced);
}
function equalsBytes(a, b) {
  if (a.length !== b.length) {
    return false;
  }
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}
function wrapHash(hash) {
  return (msg) => {
    assert_default.bytes(msg);
    return hash(msg);
  };
}
var crypto = (() => {
  const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  const nodeRequire = typeof module !== "undefined" && typeof module.require === "function" && module.require.bind(module);
  return {
    node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
    web: webCrypto
  };
})();
export {
  assertBool,
  assertBytes,
  bytesToHex,
  bytesToUtf8,
  concatBytes,
  createView,
  crypto,
  equalsBytes,
  hexToBytes2 as hexToBytes,
  bytesToHex as toHex,
  utf8ToBytes,
  wrapHash
};
//# sourceMappingURL=ethereum-cryptography_utils.js.map
